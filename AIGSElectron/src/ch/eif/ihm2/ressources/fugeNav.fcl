// Block definition (there may be more than one block per file)
FUNCTION_BLOCK steerFuzzyController

// Define input variables
VAR_INPUT
    var1  : REAL;
	var2 : REAL;
	var5  : REAL;
	var6  : REAL;
	var7  : REAL;
	var8  : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    OUT2 : REAL;
END_VAR

// Fuzzify input variable 'track position down/left'
FUZZIFY var1
    TERM var1_1 := (1.0,1)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var1_2 :=  (1.0,0)(5,1)(9,1)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var1_3 :=  (1.0,0)(5,0)(9,0)(10,1)(29,1)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var1_4 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,1)(49,1)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var1_5 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,1)(69,1)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var1_6 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,1)(94,1)(95,0)(119,0)(120,0);
    TERM var1_7 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,1)(119,1)(120,0);
    TERM var1_8 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,1);
END_FUZZIFY


// Fuzzify input variable 'track position up/right'
FUZZIFY var2
    TERM var2_1 := (1.0,1)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var2_2 :=  (1.0,0)(5,1)(9,1)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var2_3 :=  (1.0,0)(5,0)(9,0)(10,1)(29,1)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var2_4 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,1)(49,1)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var2_5 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,1)(69,1)(70,0)(94,0)(95,0)(119,0)(120,0);
    TERM var2_6 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,1)(94,1)(95,0)(119,0)(120,0);
    TERM var2_7 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,1)(119,1)(120,0);
    TERM var2_8 :=  (1.0,0)(5,0)(9,0)(10,0)(29,0)(30,0)(49,0)(50,0)(69,0)(70,0)(94,0)(95,0)(119,0)(120,1);
END_FUZZIFY


// Fuzzify input variable 'track  color down'
FUZZIFY var5
    TERM var5_1 :=  (-1,1)(1,0)(2,0);
    TERM var5_2 :=  (-1,0)(1,1)(2,0);
    TERM var5_3 :=  (-1,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color up'
FUZZIFY var6
    TERM var6_1 :=  (-1,1)(1,0)(2,0);
    TERM var6_2 :=  (-1,0)(1,1)(2,0);
    TERM var6_3 :=  (-1,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color left'
FUZZIFY var7
    TERM var7_1 :=  (-1,1)(1,0)(2,0);
    TERM var7_2 :=  (-1,0)(1,1)(2,0);
    TERM var7_3 :=  (-1,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color right'
FUZZIFY var8
    TERM var8_1 :=  (-1,1)(1,0)(2,0);
    TERM var8_2 :=  (-1,0)(1,1)(2,0);
    TERM var8_3 :=  (-1,0)(1,0)(2,1);
END_FUZZIFY

// Defzzzify output variable 'steer'
DEFUZZIFY OUT2
    TERM dl_0 := 0;
     TERM dl_01 := 20;
    TERM dl_1 := 1;
    TERM dl_2 := 2;
    TERM dl_3 := 4;
    TERM dl_4 := 7;
    TERM dl_5 := 8;
    TERM dl_6 := 10;
    TERM dl_7 := 20;
    TERM ur_0 := 0;
    TERM ur_7 := -20;
    TERM ur_6 := -10;
    TERM ur_5 := -8;    
    TERM ur_1 := -1;
    TERM ur_2 := -2;
    TERM ur_3 := -4;
    TERM ur_4 := -7;   
    TERM ur_01 := -20;
       
    // Use 'Center Of AREA' defuzzification method
    METHOD : COGS;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
     AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;
 	
 	RULE 1 : IF  var1 IS var1_1 THEN OUT2 IS dl_0;
 	
 	RULE 2 : IF  var1 IS var1_2   THEN OUT2 IS dl_1;
 
 	RULE 3 : IF  var1 IS var1_3  THEN OUT2 IS dl_2;
 	
 	RULE 4 : IF  var1 IS var1_4 THEN OUT2 IS dl_3;
 	
 	RULE 5 : IF  var1 IS var1_5 THEN OUT2 IS dl_4;
 	
 	RULE 6 : IF  var1 IS var1_6 THEN OUT2 IS dl_5;
 
 	RULE 7 : IF  var1 IS var1_7 THEN OUT2 IS dl_6;
 	
 	RULE 8 : IF  var1 IS var1_8 THEN OUT2 IS dl_7;

 	RULE 9 : IF  var2 IS var2_1 THEN OUT2 IS ur_0;
 	
 	RULE 10 : IF  var2 IS var2_2   THEN OUT2 IS ur_1;
 
 	RULE 11 : IF  var2 IS var2_3  THEN OUT2 IS ur_2;
 	
 	RULE 12 : IF  var2 IS var2_4 THEN OUT2 IS ur_3;
 	
 	RULE 13 : IF  var2 IS var2_5 THEN OUT2 IS ur_4;
 	
 	RULE 14 : IF  var2 IS var2_6 THEN OUT2 IS ur_5;
 
 	RULE 15 : IF  var2 IS var2_7 THEN OUT2 IS ur_6;
 	
 	RULE 16 : IF  var2 IS var2_8 THEN OUT2 IS ur_7; 	

 	RULE 17 : IF  var2 IS var2_1 AND var1 IS var1_1 THEN OUT2 IS ur_1;
 	
 	RULE 18 : IF  var2 IS var2_2  AND var1 IS var1_2 THEN OUT2 IS ur_3;
 
 	RULE 19 : IF  var2 IS var2_3 AND var1 IS var1_3 THEN OUT2 IS dl_3;
 	
 	RULE 20 : IF  var2 IS var2_4 AND var1 IS var1_4 THEN OUT2 IS ur_4;
 
 	RULE 21 : IF  var2 IS var2_5 AND var1 IS var1_5 THEN OUT2 IS dl_4;
 	
 	RULE 22 : IF  var2 IS var2_6 AND var1 IS var1_6 THEN OUT2 IS ur_6;
 
 	RULE 23 : IF  var2 IS var2_7  AND var1 IS var1_7 THEN OUT2 IS dl_6;
 	
 	RULE 24 : IF  var2 IS var2_8 AND var1 IS var1_8 THEN OUT2 IS ur_7; 	

	RULE 25 : IF  var2 IS var2_2 AND var1 IS var1_5 THEN OUT2 IS dl_01;

	RULE 26 : IF  var2 IS var2_2 AND var1 IS var1_6 THEN OUT2 IS dl_01;
	
	RULE 27 : IF  var2 IS var2_2 AND var1 IS var1_7 THEN OUT2 IS dl_01;
	
	RULE 28 : IF  var2 IS var2_2 AND var1 IS var1_8 THEN OUT2 IS dl_01;

	RULE 29 : IF  var2 IS var2_5 AND var1 IS var1_2 THEN OUT2 IS ur_01;
	
	RULE 30 : IF  var2 IS var2_6 AND var1 IS var1_2 THEN OUT2 IS ur_01;
	
	RULE 31 : IF  var2 IS var2_7 AND var1 IS var1_2 THEN OUT2 IS ur_01;
	
	RULE 32 : IF  var2 IS var2_8 AND var1 IS var1_2 THEN OUT2 IS ur_01;
	
	RULE 33 : IF  var2 IS var2_1 AND var1 IS var1_1 AND (var5 IS var5_1 OR var7 IS var7_1) THEN OUT2 IS ur_1;
	
	RULE 34 : IF  var2 IS var2_1 AND var1 IS var1_1 AND (var6 IS var6_1 OR var8 IS var8_1) THEN OUT2 IS dl_1;

	RULE 35 : IF  var2 IS var2_2 AND var1 IS var1_2 AND (var5 IS var5_1 OR var7 IS var7_1) THEN OUT2 IS ur_5;
	
	RULE 36 : IF  var2 IS var2_2 AND var1 IS var1_2 AND (var6 IS var6_1 OR var8 IS var8_1) THEN OUT2 IS dl_5;
	
	RULE 37 : IF  var2 IS var2_3 AND var1 IS var1_3 AND (var5 IS var5_1 OR var7 IS var7_1) THEN OUT2 IS ur_5;

	RULE 38 : IF  var2 IS var2_3 AND var1 IS var1_3 AND (var6 IS var6_1 OR var8 IS var8_1) THEN OUT2 IS dl_5;

	RULE 39 : IF  var2 IS var2_4 AND var1 IS var1_4 AND (var5 IS var5_1 OR var7 IS var7_1) THEN OUT2 IS ur_6;
	
	RULE 40 : IF  var2 IS var2_4 AND var1 IS var1_4 AND (var6 IS var6_1 OR var8 IS var8_1) THEN OUT2 IS dl_6;
	
	RULE 41 : IF  var2 IS var2_5 AND var1 IS var1_5 AND (var5 IS var5_1 OR var7 IS var7_1) THEN OUT2 IS ur_7;

	RULE 42 : IF  var2 IS var2_5 AND var1 IS var1_5 AND (var6 IS var6_1 OR var8 IS var8_1) THEN OUT2 IS dl_7;
	
END_RULEBLOCK


END_FUNCTION_BLOCK
