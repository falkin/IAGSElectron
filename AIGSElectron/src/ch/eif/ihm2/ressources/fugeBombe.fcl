// Block definition (there may be more than one block per file)
FUNCTION_BLOCK steerFuzzyController

// Define input variables
VAR_INPUT
    var1  : REAL;
	var2  : REAL;
	var3  : REAL;
	var4  : REAL;
	var5  : REAL;
	var6  : REAL;
	var7  : REAL;
	var8  : REAL;
	var9  : REAL;	
	var10  : REAL;	
END_VAR

// Define output variable
VAR_OUTPUT
    OUT2 : REAL;
END_VAR

// Fuzzify input variable 'track position down'
FUZZIFY var1
    TERM var1_1 :=  (20,1)(40,0)(100,0);
    TERM var1_2 :=  (20,0)(40,1)(100,0);
    TERM var1_3 :=  (20,0)(40,0)(100,1);
END_FUZZIFY

// Fuzzify input variable 'track position up'
FUZZIFY var2
    TERM var2_1 :=  (20,1)(40,0)(100,0);
    TERM var2_2 :=  (20,0)(40,1)(100,0);
    TERM var2_3 :=  (20,0)(40,0)(100,1);
END_FUZZIFY

// Fuzzify input variable 'track position left'
FUZZIFY var3
    TERM var3_1 :=  (20,1)(40,0)(100,0);
    TERM var3_2 :=  (20,0)(40,1)(100,0);
    TERM var3_3 :=  (20,0)(40,0)(1000,1);
END_FUZZIFY

// Fuzzify input variable 'track position right'
FUZZIFY var4
    TERM var4_1 :=  (20,1)(40,0)(100,0);
    TERM var4_2 :=  (20,0)(40,1)(100,0);
    TERM var4_3 :=  (20,0)(40,0)(100,1);
END_FUZZIFY

// Fuzzify input variable 'track position color down'
FUZZIFY var5
    TERM var5_1 :=  (0,1)(1,0)(2,0);
    TERM var5_2 :=  (0,0)(1,1)(2,0);
    TERM var5_3 :=  (0,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color down'
FUZZIFY var5
    TERM var5_1 :=  (0,1)(1,0)(2,0);
    TERM var5_2 :=  (0,0)(1,1)(2,0);
    TERM var5_3 :=  (0,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color up'
FUZZIFY var6
    TERM var6_1 :=  (0,1)(1,0)(2,0);
    TERM var6_2 :=  (0,0)(1,1)(2,0);
    TERM var6_3 :=  (0,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color left'
FUZZIFY var7
    TERM var7_1 :=  (0,1)(1,0)(2,0);
    TERM var7_2 :=  (0,0)(1,1)(2,0);
    TERM var7_3 :=  (0,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable 'track  color right'
FUZZIFY var8
    TERM var8_1 :=  (0,1)(1,0)(2,0);
    TERM var8_2 :=  (0,0)(1,1)(2,0);
    TERM var8_3 :=  (0,0)(1,0)(2,1);
END_FUZZIFY

// Fuzzify input variable ' power'
FUZZIFY var9
    TERM var9_1 :=  (0,0)(25,1)(50,0)(75,0)(100,0);
    TERM var9_2 :=  (0,0)(25,0)(50,1)(75,0)(100,0);
    TERM var9_3 :=  (0,0)(25,0)(50,0)(75,1)(100,0);
    TERM var9_4 :=  (0,0)(25,0)(50,0)(75,0)(100,1);
    TERM var9_5 :=  (0,1)(25,0)(50,0)(75,0)(100,0);
END_FUZZIFY

// Fuzzify input variable 'direction'
FUZZIFY var10
    TERM var10_1 :=  (1,1)(2,0)(3,0)(4,0);
    TERM var10_2 :=  (1,0)(2,1)(3,0)(4,0);
    TERM var10_3 :=  (1,0)(2,0)(3,1)(4,0);
    TERM var10_4 :=  (1,0)(2,0)(3,0)(4,1);

END_FUZZIFY
// Defzzzify output variable 'steer'
DEFUZZIFY OUT2
    TERM nothing := -1;
    TERM fire := 3;
    TERM fireAdverse := 5;
    // Use 'Center Of AREA' defuzzification method
    METHOD : COGS;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;
 	
 	RULE 1 : IF  var5 IS var5_1 THEN OUT2 IS nothing;
 	
 	RULE 2 : IF  var6 IS var6_1   THEN OUT2 IS nothing;
 
 	RULE 3 : IF  var7 IS var7_1  THEN OUT2 IS nothing;
 	
 	RULE 4 : IF  var8 IS var8_1 THEN OUT2 IS nothing;
 	
 	RULE 5 : IF  var5 IS var5_2 AND var1 IS var1_3 AND   var9 IS var9_4 AND var10 IS var10_1 THEN OUT2 IS fire;
 	
 	RULE 6 : IF  var6 IS var6_2 AND  var2 IS var2_3  AND  var9 IS var9_4 AND var10 IS var10_2 THEN OUT2 IS fire;

 	RULE 7 : IF  var7 IS var7_2 AND  var3 IS var3_3 AND  var9 IS var9_4 AND var10 IS var10_3 THEN OUT2 IS fire;
 	
 	RULE 8 : IF  var8 IS var8_2 AND  var4 IS var4_3 AND  var9 IS var9_4 AND var10 IS var10_4 THEN OUT2 IS fire;
 	
 	RULE 9 : IF  var5 IS var5_2 AND (var9 IS var9_1 OR var9 IS var9_2) THEN OUT2 IS nothing;
 	
 	RULE 10 : IF  var6 IS var6_2 AND (var9 IS var9_1 OR var9 IS var9_2) THEN OUT2 IS nothing;
 
 	RULE 11 : IF  var7 IS var7_2 AND (var9 IS var9_1 OR var9 IS var9_2) THEN OUT2 IS nothing;
 	
 	RULE 12 : IF  var8 IS var8_2 AND (var9 IS var9_1 OR var9 IS var9_2) THEN OUT2 IS nothing;

    RULE 13 : IF  var5 IS var5_3  AND var10 IS var10_1 THEN OUT2 IS fireAdverse;
 	
 	RULE 14 : IF  var6 IS var6_3  AND var10 IS var10_2  THEN OUT2 IS fireAdverse;
 
 	RULE 15 : IF  var7 IS var7_3 AND var10 IS var10_3  THEN OUT2 IS fireAdverse;
 	
 	RULE 16 : IF  var8 IS var8_3  AND var10 IS var10_4  THEN OUT2 IS fireAdverse;
 	
END_RULEBLOCK

END_FUNCTION_BLOCK
